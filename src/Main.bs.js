// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block                = require("bs-platform/lib/js/block.js");
var Caml_int32           = require("bs-platform/lib/js/caml_int32.js");
var Logic$SpaceInvaders  = require("./Logic.bs.js");
var Drawer$SpaceInvaders = require("./Drawer.bs.js");

function makeGameBoard(param) {
  var height = param[/* height */1];
  var width = param[/* width */0];
  var playerPosition_000 = /* x */width / 2 | 0;
  var playerPosition_001 = /* y */height - 10 | 0;
  var playerPosition = /* record */[
    playerPosition_000,
    playerPosition_001
  ];
  var invaderSize_000 = /* width */width / 10 | 0;
  var invaderSize_001 = /* height */height / 30 | 0;
  var invaderSize = /* record */[
    invaderSize_000,
    invaderSize_001
  ];
  var invaderSpeed = /* record */[
    /* x */0,
    /* y */0
  ];
  var invaderXOffset = (invaderSize_000 / 2 | 0) + (invaderSize_000 / 10 | 0) | 0;
  var invaderXSeparation = invaderSize_000 + (invaderSize_000 / 10 | 0) | 0;
  return /* record */[
          /* bodies : :: */[
            /* Player */Block.__(0, [
                /* record */[
                  /* width */18,
                  /* height */8
                ],
                playerPosition
              ]),
            /* :: */[
              /* Invader */Block.__(1, [
                  invaderSize,
                  /* record */[
                    /* x */invaderXOffset + 0 | 0,
                    /* y */10
                  ],
                  invaderSpeed
                ]),
              /* :: */[
                /* Invader */Block.__(1, [
                    invaderSize,
                    /* record */[
                      /* x */invaderXOffset + (invaderXSeparation << 0) | 0,
                      /* y */10
                    ],
                    invaderSpeed
                  ]),
                /* :: */[
                  /* Invader */Block.__(1, [
                      invaderSize,
                      /* record */[
                        /* x */invaderXOffset + (invaderXSeparation << 1) | 0,
                        /* y */10
                      ],
                      invaderSpeed
                    ]),
                  /* :: */[
                    /* Invader */Block.__(1, [
                        invaderSize,
                        /* record */[
                          /* x */invaderXOffset + Caml_int32.imul(invaderXSeparation, 3) | 0,
                          /* y */10
                        ],
                        invaderSpeed
                      ]),
                    /* :: */[
                      /* Invader */Block.__(1, [
                          invaderSize,
                          /* record */[
                            /* x */invaderXOffset + (invaderXSeparation << 2) | 0,
                            /* y */10
                          ],
                          invaderSpeed
                        ]),
                      /* :: */[
                        /* Invader */Block.__(1, [
                            invaderSize,
                            /* record */[
                              /* x */invaderXOffset + Caml_int32.imul(invaderXSeparation, 5) | 0,
                              /* y */10
                            ],
                            invaderSpeed
                          ]),
                        /* :: */[
                          /* Invader */Block.__(1, [
                              invaderSize,
                              /* record */[
                                /* x */invaderXOffset + Caml_int32.imul(invaderXSeparation, 6) | 0,
                                /* y */10
                              ],
                              invaderSpeed
                            ]),
                          /* :: */[
                            /* Invader */Block.__(1, [
                                invaderSize,
                                /* record */[
                                  /* x */invaderXOffset + Caml_int32.imul(invaderXSeparation, 7) | 0,
                                  /* y */10
                                ],
                                invaderSpeed
                              ]),
                            /* :: */[
                              /* Invader */Block.__(1, [
                                  invaderSize,
                                  /* record */[
                                    /* x */invaderXOffset + (invaderXSeparation << 3) | 0,
                                    /* y */10
                                  ],
                                  invaderSpeed
                                ]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          /* size : record */[
            /* width */width,
            /* height */height
          ]
        ];
}

var gameKeyboard = /* record */[
  /* left : false */0,
  /* right : false */0,
  /* space : false */0
];

function keyFromEvent(e) {
  var keyCode = e.keyCode;
  var switcher = keyCode - 32 | 0;
  if (switcher > 7 || switcher < 0) {
    return /* UnusedKey */3;
  } else {
    switch (switcher) {
      case 0 : 
          return /* Space */2;
      case 5 : 
          return /* Left */0;
      case 1 : 
      case 2 : 
      case 3 : 
      case 4 : 
      case 6 : 
          return /* UnusedKey */3;
      case 7 : 
          return /* Right */1;
      
    }
  }
}

document.addEventListener("keydown", (function (e) {
        var key = keyFromEvent(e);
        switch (key) {
          case 0 : 
              gameKeyboard[/* left */0] = /* true */1;
              return /* () */0;
          case 1 : 
              gameKeyboard[/* right */1] = /* true */1;
              return /* () */0;
          case 2 : 
              gameKeyboard[/* space */2] = /* true */1;
              return /* () */0;
          case 3 : 
              return /* () */0;
          
        }
      }));

document.addEventListener("keyup", (function (e) {
        var key = keyFromEvent(e);
        switch (key) {
          case 0 : 
              gameKeyboard[/* left */0] = /* false */0;
              return /* () */0;
          case 1 : 
              gameKeyboard[/* right */1] = /* false */0;
              return /* () */0;
          case 2 : 
              gameKeyboard[/* space */2] = /* false */0;
              return /* () */0;
          case 3 : 
              return /* () */0;
          
        }
      }));

function gameLoop(state, keyboard, canvas, _) {
  var nextState = Logic$SpaceInvaders.tick(state, keyboard);
  Drawer$SpaceInvaders.draw(nextState, canvas);
  return requestAnimationFrame((function (param) {
                return gameLoop(nextState, keyboard, canvas, param);
              }));
}

var canvas = document.getElementById("screen");

var screen = canvas.getContext("2d");

var startButton = document.getElementById("start");

var initialBoard = makeGameBoard(/* record */[
      /* width */canvas.width,
      /* height */canvas.height
    ]);

function startGame() {
  gameLoop(initialBoard, gameKeyboard, canvas, 0);
  return /* () */0;
}

startButton.addEventListener("click", (function () {
        return startGame(/* () */0);
      }));

exports.makeGameBoard = makeGameBoard;
exports.gameKeyboard  = gameKeyboard;
exports.keyFromEvent  = keyFromEvent;
exports.gameLoop      = gameLoop;
exports.canvas        = canvas;
exports.screen        = screen;
exports.startButton   = startButton;
exports.initialBoard  = initialBoard;
exports.startGame     = startGame;
/*  Not a pure module */
