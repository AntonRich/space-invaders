// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List  = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");

var canvas = document.getElementById("screen");

var screen = canvas.getContext("2d");

function getScreenSize(context) {
  return /* record */[
          /* width */context.width,
          /* height */context.height
        ];
}

function updatePlayer(keyboard, param) {
  var center = param[/* center */1];
  var match = keyboard[/* left */0];
  var match$1 = keyboard[/* right */1];
  return /* record */[
          /* size */param[/* size */0],
          /* center : record */[
            /* x */(center[/* x */0] + (
                match !== 0 ? -2 : 0
              ) | 0) + (
              match$1 !== 0 ? 2 : 0
            ) | 0,
            /* y */center[/* y */1]
          ]
        ];
}

function updateInvaders(invaders) {
  return invaders;
}

function updateBullet(param) {
  var velocity = param[/* velocity */2];
  var center = param[/* center */1];
  return /* record */[
          /* size */param[/* size */0],
          /* center : record */[
            /* x */center[/* x */0],
            /* y */center[/* y */1] + velocity[/* y */1] | 0
          ],
          /* velocity */velocity
        ];
}

function updateBullets(keyboard, bullets, origin) {
  var updatedBullets = List.map(updateBullet, bullets);
  if (keyboard[/* space */2]) {
    var bullet_000 = /* size : record */[
      /* width */3,
      /* height */3
    ];
    var bullet_001 = /* center : record */[
      /* x */origin[/* x */0],
      /* y */origin[/* y */1]
    ];
    var bullet_002 = /* velocity : record */[
      /* x */0,
      /* y */-6
    ];
    var bullet = /* record */[
      bullet_000,
      bullet_001,
      bullet_002
    ];
    return List.append(/* :: */[
                bullet,
                /* [] */0
              ], updatedBullets);
  } else {
    return updatedBullets;
  }
}

function tick(game, keyboard) {
  var player = game[/* player */0];
  return /* record */[
          /* player */updatePlayer(keyboard, player),
          /* invaders */game[/* invaders */1],
          /* bullets */updateBullets(keyboard, game[/* bullets */2], player[/* center */1])
        ];
}

function drawBody(screen, body) {
  var exit = 0;
  switch (body.tag | 0) {
    case 1 : 
        var match = body[0];
        var center = match[/* center */1];
        var size = match[/* size */0];
        screen.fillRect(center[/* x */0] - (size[/* width */0] / 2 | 0) | 0, center[/* y */1] - (size[/* height */1] / 2 | 0) | 0, size[/* width */0], size[/* height */1]);
        return /* () */0;
    case 0 : 
    case 2 : 
        exit = 1;
        break;
    
  }
  if (exit === 1) {
    var match$1 = body[0];
    var center$1 = match$1[/* center */1];
    var size$1 = match$1[/* size */0];
    screen.fillRect(center$1[/* x */0] - (size$1[/* width */0] / 2 | 0) | 0, center$1[/* y */1] - (size$1[/* height */1] / 2 | 0) | 0, size$1[/* width */0], size$1[/* height */1]);
    return /* () */0;
  }
  
}

function draw(game, canvas) {
  var screen = canvas.getContext("2d");
  var screenSize = getScreenSize(canvas);
  screen.clearRect(0, 0, screenSize[/* width */0], screenSize[/* height */1]);
  drawBody(screen, /* Player */Block.__(0, [game[/* player */0]]));
  return List.map((function (param) {
                return drawBody(screen, param);
              }), List.map((function (b) {
                    return /* Bullet */Block.__(2, [b]);
                  }), game[/* bullets */2]));
}

var initialState = /* record */[
  /* player : record */[
    /* size : record */[
      /* width */12,
      /* height */6
    ],
    /* center : record */[
      /* x */120,
      /* y */300
    ]
  ],
  /* invaders : :: */[
    /* record */[
      /* size : record */[
        /* width */30,
        /* height */10
      ],
      /* center : record */[
        /* x */10,
        /* y */90
      ],
      /* patrolX */3,
      /* speedX */3
    ],
    /* [] */0
  ],
  /* bullets : [] */0
];

var gameKeyboard = /* record */[
  /* left : false */0,
  /* right : false */0,
  /* space : false */0
];

document.addEventListener("keydown", (function (e) {
        var keyCode = e.keyCode;
        var switcher = keyCode - 32 | 0;
        if (switcher > 7 || switcher < 0) {
          console.log("");
          return /* () */0;
        } else {
          switch (switcher) {
            case 0 : 
                gameKeyboard[/* space */2] = /* true */1;
                return /* () */0;
            case 5 : 
                gameKeyboard[/* left */0] = /* true */1;
                return /* () */0;
            case 1 : 
            case 2 : 
            case 3 : 
            case 4 : 
            case 6 : 
                console.log("");
                return /* () */0;
            case 7 : 
                gameKeyboard[/* right */1] = /* true */1;
                return /* () */0;
            
          }
        }
      }));

document.addEventListener("keyup", (function (e) {
        var keyCode = e.keyCode;
        var switcher = keyCode - 32 | 0;
        if (switcher > 7 || switcher < 0) {
          console.log("");
          return /* () */0;
        } else {
          switch (switcher) {
            case 0 : 
                gameKeyboard[/* space */2] = /* false */0;
                return /* () */0;
            case 5 : 
                gameKeyboard[/* left */0] = /* false */0;
                return /* () */0;
            case 1 : 
            case 2 : 
            case 3 : 
            case 4 : 
            case 6 : 
                console.log("");
                return /* () */0;
            case 7 : 
                gameKeyboard[/* right */1] = /* false */0;
                return /* () */0;
            
          }
        }
      }));

function gameLoop(state, keyboard, _) {
  var nextState = tick(state, keyboard);
  draw(nextState, canvas);
  return requestAnimationFrame((function (param) {
                return gameLoop(nextState, keyboard, param);
              }));
}

gameLoop(initialState, gameKeyboard, 0);

exports.canvas         = canvas;
exports.screen         = screen;
exports.getScreenSize  = getScreenSize;
exports.updatePlayer   = updatePlayer;
exports.updateInvaders = updateInvaders;
exports.updateBullet   = updateBullet;
exports.updateBullets  = updateBullets;
exports.tick           = tick;
exports.drawBody       = drawBody;
exports.draw           = draw;
exports.initialState   = initialState;
exports.gameKeyboard   = gameKeyboard;
exports.gameLoop       = gameLoop;
/* canvas Not a pure module */
